#!/usr/bin/env bash
set -e

if [ ! `basename $PWD` = "novel-builder" ]; then
    echo "Please run the script from inside the novel-builder directory."
    exit 1
fi

SOURCE_DIR=../src
SOURCES=../src/*.md
BUILD_DIR=../build
OUTPUT_DIR=../bin
LOGFILE=$BUILD_DIR/build.log

if [[ -d $SOURCE_DIR ]]; then
    SOURCES=$SOURCE_DIR/*.md
else
    echo "Source directory '$SOURCE_DIR' does not exist!"
    exit 1
fi

version () {
    echo "Novel Builder v2.0.0"
}

usage () {
    echo "Usage: $0 [OPTION || COMMAND]"
    echo -e "\nOptions:"
    echo -e "\t-h, --help\tPrint this help message"
    echo -e "\t-v. --version\tPrint version and exit"
    echo -e "\nCOMMAND must be one of:"
    echo -e "\tclean\t\tRemove build directory."
    echo -e "\twc\t\tPrint word count for each chapter and a grand total."
    echo -e "\tmanuscript"
    echo -e "\tpaperback"
    exit 1
}

create_dir_if_not_exist () {
    if [[ ! -d $1 ]]; then
        mkdir -p $1
    fi
}

# https://stackoverflow.com/questions/29436275/how-to-prompt-for-yes-or-no-in-bash
function yes_or_no {
    while true; do
        read -p "$* [y/n]: " yn
        case $yn in
            [Yy]*) return 0  ;;  
            [Nn]*) echo "Aborted" ; return  1 ;;
        esac
    done
}

error_msg () {
    echo "[Error] Check $BUILD_DIR/build.log"
}

manuscript () {
    source ../meta.sh
    echo -n "Preparing manuscript PDF... "
    create_dir_if_not_exist $BUILD_DIR
    create_dir_if_not_exist $OUTPUT_DIR

    cp $SOURCE_DIR/css/manuscript.css $BUILD_DIR

    filename="$abbr_title"
    text_style=$SOURCE_DIR/css/manuscript.css
    html_title=$SOURCE_DIR/html/manuscript_title.html
    html_text=$BUILD_DIR/$filename-html-text.html
    pdf_title=$BUILD_DIR/$filename-pdf-title.pdf
    pdf_text=$BUILD_DIR/$filename-pdf-text.pdf
    output=$OUTPUT_DIR/$filename-manuscript.pdf

    echo -e "\n\n[MANUSCRIPT]" >> $LOGFILE

    pandoc --standalone \
        --verbose \
        -f markdown \
        -t html \
        -c $text_style \
        --metadata title="$title" \
        -o $html_text $SOURCES >> $LOGFILE 2>&1\
        && \
        weasyprint $html_text $pdf_text \
        || \
        error_msg

    # Apply wordcount to title page
    intermediate=`cat $SOURCES | wc -w | awk '{print $1" / 1000"}' | bc -l`
    wordcount=`printf "%.0f" "$intermediate" | awk '{print $1" * 1000"}' | bc -l`
    wordcount_comma=`printf "%'d" $wordcount`
    sed -e "s/WORDCOUNT/$wordcount_comma Words/" $html_title > $BUILD_DIR/manuscript_title.html
    weasyprint $BUILD_DIR/manuscript_title.html $pdf_title

    pdfunite $pdf_title $pdf_text $output >> $LOGFILE 2>&1 && echo "Done!"
}

paperback () {
    source ../meta.sh
    echo -n "Preparing paperback PDF... "
    create_dir_if_not_exist $BUILD_DIR

    html_frontmatter=../src/html/paperback_frontmatter.html
    html_text=$BUILD_DIR/paperback.html
    pdf_frontmatter=$BUILD_DIR/paperback_frontmatter.pdf
    pdf_text=$BUILD_DIR/paperback_text.pdf

    output=$OUTPUT_DIR/$abbr_title-paperback.pdf

    echo -e "\n\n[PAPERBACK]" >> $LOGFILE
    # Paperback body
    pandoc --standalone \
        --verbose \
        -f markdown \
        -t html \
        -c ../src/css/paperback.css \
        --metadata title="$title" \
        $SOURCES -o $html_text >> $LOGFILE 2>&1 \
        && \
        weasyprint $html_text $pdf_text \
        || \
        error_msg
    
    # Paperback front matter
    weasyprint $html_frontmatter $pdf_frontmatter
    
    pdfunite $pdf_frontmatter $pdf_text $output
    
    echo "Done!"
}

epub () {
    source ../meta.sh
    echo -n "Preparing EPUB... "
    create_dir_if_not_exist $BUILD_DIR
    create_dir_if_not_exist $OUTPUT_DIR

    output=$OUTPUT_DIR/$abbr_title.epub

    echo -e "\n\n[EPUB]" >> $LOGFILE
    pandoc --verbose \
        --metadata-file=../epub.yml \
        -o $output $SOURCES >> $LOGFILE 2>&1 \
        && echo "Done!" \
        || error_msg
}

init () {
    create_dir_if_not_exist ../src/html
    create_dir_if_not_exist ../src/css

    echo -e "\nNovel Builder\nInitializing new project."
    echo -en "\nTitle: " && read title
    echo -en "Abbreviated Title (For manuscript page headers and file names): " && read abbr_title
    echo -en "Subtitle (leave blank for none): " && read subtitle
    echo -en "Author's Name: " && read author
    lastname=`echo $author | awk -F " " '{print $NF}'`
    echo -n "Address (Line 1): " && read addr_1
    echo -n "Address (Line 2): " && read addr_2
    echo -n "Phone: " && read phone
    echo -n "Email: " && read email
    echo -n "URL: " && read url
    echo -n "Pen Name (leave empty to use Author's name): " && read pen
    if [ "$pen" = "" ]; then
        pen=$author
    fi
    echo -n "Copyright Holder (leave empty to use Author's name): " && read copyright
    if [ "$copyright" = "" ]; then
        copyright=$author
    fi
    echo -n "Copyright Year (leave blank for $(date +%Y)): " && read year
    if [ "$year" = "" ]; then
        year=`date +%Y`
    fi
    echo -n "Publisher (leave blank for none): " && read publisher

    yes_or_no "Everything Correct?" || init

    # write settings needed for later use to file
    echo -e "title='$title'\nabbr_title=$abbr_title" > ../meta.sh

    echo -e "\n* Creating HTML files."
    cat html/manuscript_title_template.html | sed -e \
        "s/TITLE/$title/; s/AUTHOR/$author/; s/ADDR_1/$addr_1/; \
            s/ADDR_2/$addr_2/; s/PHONE/$phone/; s/EMAIL/$email/; \
            s/URL/$url/; s/PEN/$pen/; s/YEAR/$year/; \
            s/COPYRIGHT/$copyright/;" \
        > ../src/html/manuscript_title.html
    cat html/paperback_frontmatter.html | sed -e \
        "s/TITLE/$title/; s/SUB/$subtitle/; s/AUTHOR/$author/; \
            s/PUBLISHER/$publisher/; s/YEAR/$year/; s/COPYRIGHT/$copyright/;" \
        > ../src/html/paperback_frontmatter.html

    echo "* Creating CSS files."
    cat css/manuscript.css | sed -e \
        "s/LASTNAME/$lastname/; s/TITLE/$abbr_title/;" \
        > ../src/css/manuscript.css
    cat css/paperback.css | sed -e \
        "s/AUTHOR/$author/; s/TITLE/$title/;" \
        > ../src/css/paperback.css
    
    # Copy css files that don't require customization
    cp css/{manuscript_title,paperback_frontmatter}.css ../src/css

    # Customize epub.yml template
    echo "* Creating EPUB metadata file..."
    cat epub-template.yml | sed -e \
        "s/TITLE/$title/; s/SUB/$subtitle/; s/AUTHOR/$author/; \
            s/PUBLISHER/$publisher/; s/YEAR/$year/; s/COPYRIGHT/$copyright/;" \
        > ../epub.yml
    
    echo -e "\nDone!"
}

# MAIN
case "$1" in
    init)           init ;;
    clean)          rm -rf ../build ;;
    manuscript)     manuscript && echo "Done!" ;;
    paperback)      paperback && echo "Done!" ;;
    epub)           epub && echo "Done!" ;;
    all)            manuscript && paperback && epub && echo "Done!" ;;
    wc)             wc -w $SOURCES | sed -e "s/\.\.\/src\///" ;;
    -h|--help)      usage ;;
    -v|--version)   version ;;
    "")             usage ;;
    *)              echo "invalid command" && usage ;;
esac