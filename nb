#!/usr/bin/env bash
set -e

if ((BASH_VERSINFO < 4)); then
    echo "This script requires BASH version 4 or higher."
    exit 1
fi

VERSION=2.1.0
WPM=250

SOURCES=(../src/*.md)
SRC_HTML=../src/html
SRC_CSS=../src/css
BUILD=../build
BIN=../bin
LOGFILE=${BUILD}/build.log

error_msg () {
    echo "ERROR: Check ${BUILD}/build.log"
}

prompt () {
    read -r -p "$1" "$2"
}

mkdir_if_not_exist () {
    [[ -d $1 ]] || mkdir $1
}

ensure_src_dirs () {
    mkdir_if_not_exist $SRC_HTML
    mkdir_if_not_exist $SRC_CSS
}

ensure_compile_dirs() {
    mkdir_if_not_exist $BUILD
    mkdir_if_not_exist $BIN
}

# https://stackoverflow.com/questions/29436275/how-to-prompt-for-yes-or-no-in-bash
function yes_or_no {
    while true; do
        read -rp "$* [y/n]: " yn
        case $yn in
            [Yy]*) return 0  ;;  
            [Nn]*) echo "Aborted" ; return  1 ;;
        esac
    done
}

usage () {
    cat << EOF
Usage: $0 [OPTION | COMMAND]

OPTIONs:
    -h, --help      Print this help message
    -v, --version   Print version and exit

COMMANDs:
    clean           Remove build directory
    wc              Print word count for each chapter, a grand total, and estimated reading time
    manuscript      \\
    paperback       - Compile individual formats
    epub            /
    all             Compile all formats
EOF
}

echo Novel Builder v${VERSION}
case "$1" in
    -v|--version )
        exit 0
        ;;
    -h|--help )
        usage
        exit 0
        ;;
    clean )
        if rm -rf "$BUILD"; then
            echo "Clean finished successfully"
        fi
        ;;
    wc )
        wc -w "${SOURCES[@]}" | sed -e "s/\.\.\/src\///"
        count=$(wc -w "${SOURCES[@]}" | sed -e "s/\.\.\/src\///" | tail -n 1 | cut -d\t -f1)
        time=$(( count / WPM ))
        hours=$(( time / 60 ))
        minutes=$(echo "$time % 60" | bc)
        if [[ $time -gt 60 ]]; then
            out="\t $(printf "%dh %dm reading time" "$hours" "$minutes")"
        else
            out="\t $(printf "%dm reading time" $time)"
        fi

        echo -e "$out"
        ;;
    init )
        echo "Initializing new Project."
        ensure_src_dirs
        run=0
        while [[ $run ]]; do
            echo -e "\nNovel Builder\nInitializing new project."
            prompt "Title: " title
            prompt "Abbreviated Title (For manuscript page headers and file names): " abbr_title
            prompt "Subtitle (leave blank for none): " subtitle
            prompt "Author's Name: " author
            surname=$(echo "$author" | awk -F " " '{print $NF}')
            prompt "Pen Name (leave empty to use Author's name): " pen
            if test -z "$pen"; then
                pen="$author"
            fi
            prompt "Copyright Holder (leave empty to use Author's name): " copyright
            if test -z "$copyright"; then
                copyright="$author"
            fi
            prompt "Copyright Year (leave blank for $(date +%Y)): " year
            if test -z "$year"; then
                year=$(date +%Y)
            fi
            prompt "Publisher (leave blank for none): " publisher
            prompt "Address (Line 1): " addr_1
            prompt "Address (Line 2): "  addr_2
            prompt "Phone: " phone
            prompt "Email: " email
            prompt "URL: " url
            run=$(yes_or_no "Everything correct?")
        done

        echo -e "title=\"$title\"\nabbr_title=\"$abbr_title\"" > ../meta.sh

        echo -e "\n* Creating HTML files..."
        sed -e \
            "s/TITLE/$title/; s/AUTHOR/$author/; s/ADDR_1/$addr_1/; \
            s/ADDR_2/$addr_2/; s/PHONE/$phone/; s/EMAIL/$email/; \
            s/URL/$url/; s/PEN/$pen/; s/YEAR/$year/; \
            s/COPYRIGHT/$copyright/;" \
            # Input
            html/manuscript_title_template.html \
            > ${SRC_HTML}/manuscript_title.html
        sed -e \
            "s/TITLE/$title/; s/SUB/$subtitle/; s/AUTHOR/$author/; \
            s/PUBLISHER/$publisher/; s/YEAR/$year/; s/COPYRIGHT/$copyright/;" \
            # Input
            html/paperback_frontmatter.html \
            > ${SRC_HTML}/paperback_frontmatter.html
        
        echo "* Creating CSS files..."
        sed -e \
            "s/SURNAME/$surname/; s/TITLE/$abbr_title/;" \
            # Input
            css/manuscript.css \
            > ${SRC_CSS}/manuscript.css
        sed -e \
            "s/AUTHOR/$author/; s/TITLE/$title/;" \
            # Input
            css/paperback.css \
            > ${SRC_CSS}/paperback.css
        
        echo "* Copying additional HTML and CSS..."
        cp css/{manuscript_title,paperback_frontmatter}.css "$SRC_CSS"
        cp html/manuscript_template.html "$SRC_HTML"

        echo "* Creating EPUB metadata file..."
        sed -e \
            "s/TITLE/$title/; s/SUB/$subtitle/; s/AUTHOR/$author/; \
            s/PUBLISHER/$publisher/; s/YEAR/$year/; s/COPYRIGHT/$copyright/;" \
            # Input
            epub-template.yml \
            > ../epub.yml

        echo -e "\nDone!"
        ;;
    manuscript | all)
        echo -n "Preparing manuscript PDF... "
        ensure_compile_dirs
        . ../meta.sh

        filename=$abbr_title
        html_manuscript_text=${BUILD}/${filename}_manuscript_text.html
        pdf_manuscript_text=${BUILD}/${filename}_manuscript_text.pdf
        html_manuscript_title=${BUILD}/${title}_manuscript_title.html
        pdf_manuscript_title=${BUILD}/${filename}_manuscript_title.pdf

        echo -e "\n[MANUSCRIPT] $(date)" >> $LOGFILE
        cp ${SRC_CSS}/manuscript.css "$BUILD"

        echo "<PANDOC> ${html_manuscript_text}" >> $LOGFILE
        if pandoc --standalone \
            --template=${SRC_HTML}/manuscript_template.html \
            --verbose \
            -f markdown \
            -t html \
            -c ${SRC_CSS}/manuscript.css \
            -o $html_manuscript_text \
            "${SOURCES[@]}" \
                >> $LOGFILE 2<&1
        then
            echo "<WEASYPRINT> ${html_manuscript_text}" >> $LOGFILE
            weasyprint $html_manuscript_text $pdf_manuscript_text \
                >> $LOGFILE 2>&1
        else
            error_msg
            exit 1
        fi

        # Apply wordcount to title page
        # We have to do `cat $SOURCES ...` here to get the total and not the whole report
        intermediate=$(cat "${SOURCES[@]}" | wc -w | awk '{print $1" / 1000"}' | bc -l)
        wordcount=$(printf "%.0f" "$intermediate" | awk '{print $1" * 1000"}' | bc -l)
        wordcount_comma=$(printf "%'d" "$wordcount")
        sed -e "s/WORDCOUNT/${wordcount_comma} Words/" ${SRC_HTML}/manuscript_title.html \
            > $html_manuscript_title
        
        echo "<WEASYPRINT> ${html_manuscript_title}" >> $LOGFILE
        if weasyprint $html_manuscript_title $pdf_manuscript_title \
            >> $LOGFILE 2>&1
        then
            echo "<PDFUNITE>" >> $LOGFILE
            if pdfunite $pdf_manuscript_title \
                $pdf_manuscript_text \
                ${BIN}/${filename}_manuscript.pdf \
                >> $LOGFILE 2>&1
            then
                echo "Done!"
            else
                error_msg
                exit 1
            fi
        else
            error_msg
            exit 1
        fi
        ;;& # Falls through
    paperback | all)
        echo -n "Preparing paperback PDF... "
        ensure_compile_dirs
        . ../meta.sh

        html_paperback_text=${BUILD}/paperback_text.html
        pdf_paperback_frontmatter=${BUILD}/paperback_frontmatter.pdf

        echo -e "\n[PAPERBACK] ($(date))" >> $LOGFILE
        if pandoc --standalone \
            --verbose \
            -f markdown \
            -t html \
            -c ${SRC_CSS}/paperback.css \
            -o $html_paperback_text \
            "${SOURCES[@]}" \
                >> $LOGFILE 2>&1
        then
            weasyprint $html_paperback_text \
                ${BUILD}/paperback_text.pdf \
                    >> $LOGFILE 2>&1
        else
            error_msg
            exit 1
        fi

        weasyprint ${SRC_HTML}/paperback_frontmatter.html \
            $pdf_paperback_frontmatter
        
        pdfunite $pdf_paperback_frontmatter \
            ${BUILD}/paperback_text.pdf \
            ${BIN}/${title}_paperback.pdf
        
        echo "Done!"

        ;;& # Falls through
    epub | all)
        echo -n "Preparing EPUB... "
        ensure_compile_dirs
        . ../meta.sh

        echo -e "\n[EPUB]" >> $LOGFILE
        if pandoc --verbose \
            --metadata-file=../epub.yml \
            -o ${title}.epub \
            "${SOURCES[@]}" \
                >> $LOGFILE 2>&1
        then
            echo "Done!"
        else
            error_msg
        fi
        ;;
    * )
        echo "Invalid option or command." && usage
        ;;
esac